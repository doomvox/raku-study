* raku syntax vs perl
** See: https://docs.raku.org/language/5to6-nutshell
** raku continues to have a perlish feel, but--
*** object method calls via the more standard ".", not the "->"
**** the default object for "." is $_    {  .method  }
**** string concat is now "~" not "."
*** variable names typically have sigils still: $, @, %
**** sigils are invariant:  they act like part of the name-- @array and %hash
***** Perl
#+BEGIN_SRC perl
my %fried;
$fried{eggs} = 2;
#+END_SRC 

***** Raku
#+BEGIN_SRC raku
my %fried;
%fried<eggs> = 2;
# alternately
%fried{'eggs'} = 2;
#+END_SRC 

**** you can also have names sans sigils (not done often)
#+BEGIN_SRC raku
my (\i, \j) = (2, 3);
say i + j:  ## 5
#+END_SRC

**** containers
***** vars typically point to invisible "containers", and are mutable
***** vars can point to bare values without containers
#+BEGIN_SRC raku
my $var           = 3;

my $sorta_const  := 3;
$var++;           ## Works
$sorta_const++;   ## Error
#+END_SRC
***** binding operator can create aliases
#+BEGIN_SRC raku
my $alias  :=  $var;  
$alias++;  # increments $var too
#+END_SRC

***** a 'scalar' can contain any object, including an array, hash, etc
****** similar to perl's references: $ doesn't mean "singular"

*** flattening
**** in perl, nested lists flatten out unless you do something
**** in raku, nested structures are preserved, unless you do something

***** 
my @residual   = @list (-) @exceptions; 
  ## weak: first element in array residual contains entire result array

my @residual = | @list (-) @exceptions; 
  ## better: "slips" out of container

***** a few ways to flatten: ".flat", slip operator "|"

*** everything is an object
**** chains of method calls are common
***** though there are function forms for many methods
**** smartmatch and given/when actually work
***** helps to have a type system

*** scalar and list context have gone away in Raku
**** but many operators do implied type-conversion, which feels perlish

*** a push for consistency
**** e.g. {} almost always means a block of code 
*** one-pass parsing
**** good, but that has unfortunate side effects 
***** this is okay in perl
#+BEGIN_SRC perl
if( $this ) { ... }
#+END_SRC

***** a space after "if" is *required* in raku
#+BEGIN_SRC raku
if ( $this ) { ... }
#+END_SRC






