* meeting notes October 8, 2023
** the raku study group
**** usual links
***** these notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2023oct08.org

***** code examples
****** https://github.com/doomvox/raku-study/tree/main/bin/2023oct08

***** last meeting notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2023sep10.org

** topics 






*** TODO BUG in my setup:  my automatic save/push keeps overwriting changes pulled from github.
**** e.g. https://github.com/doomvox/raku-study/commit/193650f11613b5e2e815d02d3444e86156acee01

** needs followup
*** intermittant mysterious issues with my keyboard/trackpad lash-up 
**** if you can't fix it, just replace 
*** revise my auto-push-on-save feature, should merge not over-write.

** leftovers from previous meeting 

*** MAIN Num and pi
**** https://www.reddit.com/r/rakulang/comments/15sk5oo/converting_arguments_to_num/
**** Marton:  Getopt::Long changes "enums" so they just work
**** Bruce: coercing to Numeric works with NaN but not pi
 raku -e 'say @*ARGS[0].Numeric'  NaN

**** my thought: design a new type that coerces the constants 

*** Anton Antonov working on org-mode execution of raku, pasting result under snippet
**** need: "zinc",  zero-mq  (message queuing)
https://zeromq.org

*** fez questions
**** tony o is the man
**** https://github.com/tony-o/raku-fez/issues


*** Bill M issue with two ranges/sequences

#+BEGIN_SRC raku

~ % raku
Welcome to Rakudo™ v2023.05.
Implementing the Raku® Programming Language v6.d.
Built on MoarVM version 2023.05.

To exit type 'exit' or '^D'
[0] > say grep({$_ == 1}, 0...5)
()
[0] > say 0...5
(0 1 2 3 4 5)
[0] > say 0...5,3...7
(0 1 2 3 4 7)
[0] > say 0...5;3...7
(0 1 2 3 4 5)
[0] > 0...5,3...7
(0 1 2 3 4 7)
[1] > (0...5,3...7)
(0 1 2 3 4 7)
[2] > (0...5,3...7,)
(0 1 2 3 4 7)
[3] > (0...5,6...7,)
(0 1 2 3 4 5 6 7)
[4] > (0..5,3..7,)
(0..5 3..7)
[5] > put (0..5,3..7,)
0 1 2 3 4 5 3 4 5 6 7
#+END_SRC

**** trying to strip down the examples

#+BEGIN_SRC raku
## seems strange:
say 0...5,3...7;
# (0 1 2 3 4 7)

## is raku parsing it like this?
say (0)...(5,3)...(7);
# (0 1 2 3 4 7)

## so let's try that in pieces:
say (0)...(5,3);
# (0 1 2 3 4 5 3)

## and...
say (5,3)...(7);
# ()

## Here there be LTA afoot.
#+END_SRC

***** peculiar cases, but why no warnings/errors?

**** range and sequence are confusable: '..' vs '...'




** announcements 
*** next meeting: in 2 weeks
**** Sunday Sep 24, 2023
