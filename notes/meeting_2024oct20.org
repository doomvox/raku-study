* meeting notes October 20, 2024
** the raku study group
**** usual links
***** these notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2024oct20.org 

***** code examples
****** https://github.com/doomvox/raku-study/tree/main/bin/2024oct20

***** last meeting notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2024oct06.org

** topics

*** types and arrays
**** https://github.com/Raku/problem-solving/issues/426

*** automatic FatRat upgrade behavior when you overflow Rat
**** https://stackoverflow.com/questions/71764654/is-there-a-way-to-automatically-use-fatrats-in-raku
***** lizmat:
#+BEGIIN_SRC raku
# So to activate this globally to upgrade to FatRat, you'd do:
INIT $*RAT-OVERFLOW = FatRat;

# To activate this only for a lexical scope:
my $*RAT-OVERFLOW = FatRat;
#+END_SRC

**** https://docs.raku.org/language/numerics
***** "The last Rational type-- FatRat-- keeps all of the precision you ask of it, storing the numerator and denominator as two Int objects. "

***** "A FatRat is more infectious than a Rat, so many math operations with a FatRat will produce another FatRat, preserving all of the available precision."

***** "Where a Rat degrades to aNum, math with a FatRat keeps chugging along:"

**** 
/home/doom/End/Cave/RakuStudy/Wall/raku-study/bin/2024oct20/rat_overflow_behavior.raku
https://github.com/doomvox/raku-study/tree/main/bin/2024oct20/rat_overflow_behavior.raku


***** using sourcery in the raku repl:
#+BEGIN_SRC raku
use CoreHackers::Sourcery;
say sourcery Rat, 'new', \(1, 264)
say &infix:</>.sourcery(1, 264)         ## looking at the operator: /
#+END_SRC



*** another extensive discussion of everything
**** tcl/"tickle"
***** new version came out in September
****** 64bit
****** unicode
***** John Ousterhout
****** Book: Philosophy of Software Design

**** praise for node vs python
***** dependency model is project based.
***** can have various versions in lib directory



*** weekly challenge 
**** https://theweeklychallenge.org/blog/perl-weekly-challenge-290/
**** https://theweeklychallenge.org/blog/perl-weekly-challenge-291/

*** future topic
**** rob has been looking into nqp::bindattr 

** old topics

**** hypers and junctions
https://stackoverflow.com/questions/78564598/raku-using-hyper-or-race-with-junctions

***** raku knowledge base
****** https://raku-knowledge-base.podlite.org/


*** announcements 
**** next meetings (no reason to deviate from 'every two weeks')
***** Nov 3
***** Nov 17
***** breaking the 2 week pattern:
****** Dec 8

**** Perl Science Conference (Virtual) Wednesday 2024-12-18
***** https://www.reddit.com/r/perl/comments/1ffbeg6/perl_community_conference_winter_2024_call_for/

**** Perl & Raku Conference (Greenville, SC) 2025-06-27 through 29 Fri-Sun
***** https://news.perlfoundation.org/post/dates_set_tprc_2025


