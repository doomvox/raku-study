* meeting notes November 10, 2024
** the raku study group
**** usual links
***** these notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2024nov10.org 

***** code examples
****** https://github.com/doomvox/raku-study/tree/main/bin/2024oct20

***** last meeting notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2024oct20.org

** topics
*** apologies for last minute scrambling of the schedule

*** Q: should we open an issue on FatRat/Rat.new behavior
**** way I see it:
***** it's weird, but documented (mostly)
***** on the other hand, it's so weird no one can believe it 
****** maybe, need better docs and/or tutorials
***** but maybe most of the weirdness is in funny corners 

**** the only place rat overflow variants are documented
***** https://docs.raku.org/language/variables#$*RAT-OVERFLOW

**** examples of floating point weirdness, Ovid via Bruce:
#+BEGIN_SRC sh
python3 -c 'print(.1 + .2 - .3)' # 5.551115123125783e-17
perl    -E   'say .1 + .2 - .3'  # 5.55111512312578e-17
raku    -e   'say .1 + .2 - .3'  # 0
#+END_SRC 

**** Played with using Rat as it's own overflow type
***** https://github.com/doomvox/raku-study/tree/main/bin/2024oct20/rat_overflow_to_rat.raku
****** No such method 'UPGRADE-RAT' for invocant of type 'Rat'

**** I hereby promise to open an issue discussion on these issues.
***** my take: design is peculiar, though the behavior is documented, and but possibly its weird for reasons 
****** Note: .new constructor can create a Rat that's out-of-range, has no bounds checking
***** but the *reasons* it's peculiar are not terribly well explained or documented.
***** Similarly, the use of FatRat as alternate RAT-OVERFLOW is not well discussed
***** (and needless to say, floats are peculiar too, and Raku Rats are less so in a lot of ways)

**** Rob use case: storing Rats in a database
***** obvious strategy: .nude extract numerator and denominator, store seperately
***** then you re-create the Rats using .new, right?

**** Bruce: another way to look at the design:
***** Raku provides a way to have perfect accuracy: Use FatRats explicitly, or $*RAT-OVERFLOW=FatRat.
***** Raku provides a way to have maximum speed   : Use Nums explicitly.
***** Raku defaults to a happy medium: Rats.

**** rats from last meeting:

***** automatic FatRat upgrade behavior when you overflow Rat
****** https://stackoverflow.com/questions/71764654/is-there-a-way-to-automatically-use-fatrats-in-raku
******* lizmat:
#+BEGIIN_SRC raku
# So to activate this globally to upgrade to FatRat, you'd do:
INIT $*RAT-OVERFLOW = FatRat;

# To activate this only for a lexical scope:
my $*RAT-OVERFLOW = FatRat;
#+END_SRC

****** raku docs
******* https://docs.raku.org/language/numerics
******* https://docs.raku.org/language/numerics#Rat
******** "The last Rational type-- FatRat-- keeps all of the precision you ask of it, storing the numerator and denominator as two Int objects."

******** "A FatRat is more infectious than a Rat, so many math operations with a FatRat will produce another FatRat, preserving all of the available precision."

******** "Where a Rat degrades to a Num, math with a FatRat keeps chugging along:"


***** revisited: "Declarator Docs should be limited in scope"
****** https://github.com/Raku/problem-solving/issues/438
******* lead: it would've been nice if .WHY worked in the repl
******** &rotor.WHY
******* but we can't, because you guys don't care about it.
******* so changing the syntax won't help, because you still won't care.

****** https://docs.raku.org/language/pod#Declarator_blocks

****** Perl Best Practices, Ch 7, p. 140, "Contiguity"
******* A bunch of assertions about his own experience, I think
******* https://flylib.com/books/en/2.146.1.110/1/
******** legal?

****** Sather
******* selective inheritence?




*** programming for the masses (?)
**** MARY SHAW, Carnegie Mellon University, USA, "Myths and Mythconceptions", "What does it mean to be a programming language, anyhow?"
***** https://dl.acm.org/doi/pdf/10.1145/3480947
**** https://futureofcoding.org/episodes/069.html
**** Bruce Gray talk: "Y Program"
***** argues that no one can predict who can program
***** "The Camel has Two Humps" affair

**** one of my recent faves: 
***** https://www.sciencedaily.com/releases/2020/03/200302103735.htm
****** "New research finds that a natural aptitude for learning languages is a stronger predictor of learning to program than basic math knowledge."

**** an apl-ish fizzbuzz in raku:
https://www.reddit.com/r/rakulang/comments/1glwt7a/an_aplish_fizzbuzz_in_raku/?share_id=VM0nE0oYt0kDsuyClIgKK

*** announcements 
**** next meetings (slipped a week because reasons)
***** Nov 24
***** Dec 8
***** Dec 22 
****** 2 days before xmas eve
***** Jan 5, 2025
***** Jan 19, 2025   
****** day before mlk day
***** Feb 2, 2025     

**** Perl Science Conference (Virtual) Wednesday 2024-12-18
***** https://www.reddit.com/r/perl/comments/1ffbeg6/perl_community_conference_winter_2024_call_for/

**** Perl & Raku Conference (Greenville, SC) 2025-06-27 through 29 Fri-Sun
***** https://news.perlfoundation.org/post/dates_set_tprc_2025



