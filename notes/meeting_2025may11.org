* meeting notes May 11, 2025 
** the raku study group
**** usual links
***** these notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025may11.org 

***** code examples
****** https://github.com/doomvox/raku-study/tree/main/bin/2025may11
****** https://github.com/doomvox/raku-study/tree/main/bin/Subtitles

***** last meeting notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025apr27.org 

**** discussion group
***** https://github.com/doomvox/raku-study/discussions 

** topics
*** rob ransbottom 
**** early features are released
**** when cleaning up old raku installations... 
**** can't install mi6, has to force tests
**** using a 6.e item when targeting 6.d
**** broken for 4 months, no one noticed earlier

*** me: back to grammar school


** older topics (last meeting)
*** doomvox@gmail is gone, now i'm 
**** tailorpaul@proton.me
**** tailorpaul@pm.me
***** I am not actually "tailormoon"

*** I'm keeping the github 'raku-study' page up to date with the meeting schedule
**** https://github.com/doomvox/raku-study/tree/main
**** Q: pull-request for the community page in the docs?  Add this as a universal meeting link

*** marton has some discussions going
**** https://github.com/doomvox/raku-study/discussions/20
**** https://github.com/doomvox/raku-study/discussions/18
**** https://github.com/doomvox/raku-study/discussions/16


** diving into oddities with :D and :U
*** https://github.com/doomvox/raku-study/discussions/20
*** https://docs.raku.org/language/faq#What_are_those_:D_and_:U_things_in_signatures%3F

*** Bruce:
raku -e 'sub foo ( Int:D $n ) {...}; my $p1 = &foo.signature.params[0]; say $p1.type; say $p1.modifier;'

*** https://docs.raku.org/type/Metamodel/DefiniteHOW

*** /home/doom/End/Cave/Raku/Wall/roast/MISC/misc-6.d.t
**** tests "smiley" behavior but *only* for Int?
**** no checks of Nil:D anywhere
***** find /home/doom/End/Cave/Raku/Wall/roast/ -type f | xargs egrep 'Nil:D'
**** More tests:
***** /home/doom/End/Cave/Raku/Wall/roast/S04-declarations/smiley.t
***** /home/doom/End/Cave/Raku/Wall/roast/S06-parameters/smiley.t
****** https://github.com/Raku/roast/blob/master/S06-parameters/smiley.t
***** /home/doom/End/Cave/Raku/Wall/roast/S12-attributes/smiley.t

*** Marton mentioned the Blin tool to install the whole ecosystem:
**** https://raku.land/github:Raku/Blin
**** https://github.com/Raku/Blin


*** the perl affair, my take (one more time)
**** strong initial successes: bioinformatics, WWW
**** this created an immediate panic in the computer science community
***** "perl is an ugly language!"
***** Larry Wall: weirdo outsider, not a serious member of the club
***** then there was effectively: a decade long smear campaign
****** pushed Python heavily despite non-existant library support
******* needed to re-write a lot of code, but programmers *love* that kind of busy work
***** yeah: perl5 -> perl6 business wasn't handled well, 
****** this created an opportunity for the smear campaign
**** where does this leave Raku?
***** plugging along in the side lines until it hits a Killer App
***** then everyone will imitate it (whether that makes a lot of sense or not)
***** for years whatever Microsoft did was The Right Thing
***** then for years whatever Google did was The Right Thing
****** there's very little about this that's *rational*
****** Raku's not conistent enough?  Raku's philosophy isn't quite right?  
******* these are sideshows: Not likely to be the Key Thing.
**** perl's community focus was
***** not uniform
***** often trying to address outside criticism
****** typically in cpan development, though

**** perl tiobe index: 19
***** https://www.tiobe.com/tiobe-index/

** old topics, last meeting, April 13th

*** double-colons have double meanings
https://github.com/rakudo/rakudo/issues/5805

#+BEGIN_SRC raku
sub foo(::T $a, Positional[T] $b) {
    dd :$a:$b
}
foo 42, my Int @ = 666;
# :a(42)
# :b(Array[Int].new(666))
#+END_SRC 

**** That syntax, borrowed from C++ (??) gets the type of $a an assigns it to T
So then: $b has to be a Positional of the same type as $a.

**** Double-colon might *look* like a namespace separator, but here it isn't.
(In Perl 5, that'd be a shortcut to refer to the main package.)

**** Also: https://github.com/rakudo/rakudo/issues/5802


** topics from last meeting, April 6th

*** jeff's grammars question
**** parsing tokens run together, not separated by whitespace
***** jeff:
#+BEGIN_SRC txt
Tokens run together: 

FOOBAR#BAR"STRINGFOO"

The following are tokens:

- FOO
- BAR#
- BAR
- "STRINGFOO"

#+END_SRC 
***** TODO bruce gray has a solution (see saved chat)
#+BEGIN_SRC raku
    grammar G {
        regex TOP  { [ <foo> | <bar_hash> | <bar_plain> | <a_string> ]+ } # using `regex` where we would usually use `rule`
        token foo       { 'FOO'           }
        token bar_hash  { 'BAR#'          }
        token bar_plain { 'BAR'           }
        token a_string  { '"' <-["]>* '"' }
    }
    my $s = 'FOOBAR#BAR"STRINGFOO"';
    my $p = G.parse($s)
        orelse die;
    say $p;
  # Output:
  #     ｢FOOBAR#BAR"STRINGFOO"｣
  #      foo => ｢FOO｣
  #      bar_hash => ｢BAR#｣
  #      bar_plain => ｢BAR｣
  #      a_string => ｢"STRINGFOO"｣
#+END_SRC 

*** marton:
**** https://github.com/doomvox/raku-study/discussions/17
***** 
raku -e 'race for (^8).race(batch => 1, degree => 4) {sleep rand; .say}'
****** "race for" is at the very least not always faster then a bare "for"
****** "hyper for" is still another case
******* bruce finds bare "for" is pretty fast


*** tim refers to odd string reversal challenge
**** https://theweeklychallenge.org/blog/perl-weekly-challenge-313/
**** tim's solution in clojure (next meeting: april 13th)
#+BEGIN_SRC lisp
```clj
(let [s "_c-!h_all-en!g_e"]
  (loop [chars (vec s) letters (filter alpha? chars) result ()]
    (if-let [ch (peek chars)]
      (if (alpha? ch)
        (recur (pop chars) (rest letters) (cons (first letters) result))
        (recur (pop chars) letters (cons ch result)))
      (str/join result))))
```
#+END_SRC 

**** bruce summarizes some raku solutions
#+BEGIN_SRC raku
# barroff
    my @characters = grep({ $_ ~~ m:i/ <[a..z]> / }, $str.comb);
    map({ $_ ~~ m:i/ <[a..z]> / ?? @characters.pop !! $_ }, $str.comb).join;
# feng-chang
    my @s = $s.comb;
    my @ndx = (^+@s).grep({ @s[$_] ~~ ('a'..'z')|('A'..'Z') });
    @s[@ndx] = @s[@ndx].reverse;
    put @s.join;
# jaldhar-h-vyas
    my @reversed = $str.comb.grep({ /<alpha>/ }).reverse;
    my $index = 0;
    ($str.subst(/<alpha>/, { @reversed[$index++] }, :g)).say;
# mark-anderson (similar to bruce's approach)
    my @s   = $str.comb;
    my @k   = @s.grep(/:i <[a..z]>/, :k);
    @s[@k] .= reverse;
    [~] @s
# wambash
    sprintf $str.trans( /<:alpha>/ => "%s"), $str.comb(/<:alpha>/).reverse
#+END_SRC 


*** deepmap, duckmap. flat
**** marton's discussion of duckmap was very clear: better than the docs
***** TODO docs bug: need a simpler example to introduce duckmap

**** habere points out we have: .flat(:hammer)
***** TODO docs bug: not documented in page for flat
***** https://docs.raku.org/routine/flat
***** Also: @a[**]
***** https://raku-advent.blog/2024/12/25/day-25-raku-2024-review/
***** released 2024.07, on use 6.e.PREVIEW;



** topics from Mar 9

*** rob: rakudo bug turned up in weekly challenge
**** .= operator not working as "explicit assignment"
**** https://github.com/rakudo/rakudo/issues/5803
#+BEGIN_SRC raku
## Example from the docs:
say ++$a.=abs;
say ++$a .= abs;  ## doesn't work
# Cannot modify an immutable Int (7)
#  in block <unit> at <unknown file> line 1

say ++$a.=abs;    ## this *does* work
# 8

## Marton's example
# -1.succ
# -2      ## the - is applied *after* the .succ increases value by 1

1.succ
# 2

-1 .succ  ## with the space, we start at -1 and step up 1 to 0
# 0
#+END_SRC raku

***** Marton looks up older reports:
****** https://github.com/rakudo/rakudo/issues/4996
****** https://github.com/rakudo/rakudo/issues/4863
****** https://github.com/Raku/doc/issues/3333

***** TODO doc bug (?): Traps of .= weirdness not adequate
****** https://docs.raku.org/language/traps
******* https://docs.raku.org/language/traps#Method_calls_do_not_chain
******* https://docs.raku.org/language/traps#Method_operator_calls_and_prefix_minus


** follow-up 
*** announce next meeting immediately
*** check jeff's bug status
**** added pointer to roast test 
*** doc bug traps .= weirdness not well covered.

** announcements 
*** next meetings
**** Apr 27, 2025 
**** May 11, 2025 (change in plans, let's just do one on Mother's Day)
**** May 25, 2025 
**** Jun  8, 2025 
**** Jun 22, 2025 

**** Perl & Raku Conference (Greenville, SC) 2025-06-27 through 29 Fri-Sun
***** https://tprc.us/

**** Jul 13, 2025 (3 week gap, to skip 4th of july weekend)
**** Jul 27, 2025 
**** Aug 10, 2025 
**** Aug 24, 2025 
**** Sep  7, 2025 (ok: labor day weekend was the week before)
**** Sep 21, 2025 
**** Oct  5, 2025
**** Oct 19, 2025
**** Nov 2, 2025
**** Nov 16, 2025
**** Dec 7, 2025 (three week gap, to get past thanksgiving weekend)
**** Dec 21, 2025
**** Jan  4, 2025
**** Jan  18, 2025





