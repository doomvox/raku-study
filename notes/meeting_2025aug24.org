* meeting notes August 24, 2025
** the raku study group
**** usual links
***** these notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025aug24.org 

***** code examples
****** https://github.com/doomvox/raku-study/tree/main/bin/2025aug24

****** duckmap examples are here:
******* https://github.com/doomvox/raku-study/tree/main/bin/2025jul13

****** Subtitle parsing (a subject I'll revive some day):
******* https://github.com/doomvox/raku-study/tree/main/bin/Subtitles

***** last meeting notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025aug10.org 

***** group discussions at github
****** https://github.com/doomvox/raku-study/discussions 

** topics

*** are sequences good for anything much?

*** problem-solving issue 407: comma seperated triple dot sequences
**** https://github.com/Raku/problem-solving/issues/407
**** several things are going on here
***** William Michels original goal:
****** straight-forward extraction of columns from a tabular structure
******* get raku to flatten just right when you want it
****** generating discontinuous integer ranges
***** the odd behavior of comma sep triple dots:
#+BEGIN_SRC raku
say 3 ... 7, 11 ... 13;
#+END_SRC 
****** pmichaud argues this is a comma precedence thing
******* does that explain all the observed quirks?
***** behavior of sequences (what's desired, what's necessary)
****** quirks of the roast tests

*** "is item" trait
**** https://raku-advent.blog/2024/12/25/day-25-raku-2024-review/
***** The is item trait can be used on @ and % sigilled parameters 
****** positional or associative is acceptable in dispatch if it is presented as an item
****** just a "tie-breaker": should always also a dispatch candidate that accepts when not itemized
#+BEGIN_SRC raku
multi sub foo(@a)         { say "array" }
multi sub foo(@a is item) { say "item"  }
foo  [1,2,3];  # array
foo $[1,2,3];  # item
#+END_SRC 
****** what is this for, really?

*** flatnessizers
**** flat hammer
***** code example
****** https://github.com/Raku/roast/blob/master/S32-list/flat.t
#+BEGIN_SRC raku
is-deeply @a.flat(:hammer), $hammered, 'array.flat(:hammer)';
#+END_SRC 
****** https://raku-advent.blog/2024/12/25/day-25-raku-2024-review/
#+BEGIN_SRC raku
my @a = 1, [2, [3,4]];
say @a.flat;           # (1 [2 [3 4]])
say @a.flat(:hammer);  # (1 2 3 4)
#+END_SRC 
******* One can now also use HyperWhatever (aka **) in a postcircumfix [ ] for the same semantics:
#+BEGIN_SRC raku
my @a = 1, [2, [3,4]];
say @a[*];   # (1 [2 [3 4]])
say @a[**];  # (1 2 3 4)
#+END_SRC 


*** richard hainsworth: altering a deep filed

**** https://stackoverflow.com/questions/79528856/how-to-make-altering-a-deep-field-more-idiomatic/79540270#79540270

***** the goal is to de-uglify this:
# Given data:
#   %sources{$lang}{$filename}{$attribute}
#+BEGIN_SRC raku
for %sources.values {
    for .pairs {
       for .value.pairs.grep({ .key eq 'modified'}) {
          .value = transform-modified( .value )
       }
    }
}
#+END_SRC 

**** wamba: duckmap
***** iterates through hash, toggles the modified fields only in the deepest layers
****** checks for the existence of modified and ensures no further associative values exist.
#+BEGIN_SRC raku
my %source := %(b => %(a => %(modified => True, c => 2), modified => True));
%source.duckmap: -> %a where { 
    .<modified>:exists 
    and .values.none ~~ Associative 
} { 
    %a<modified> .=not 
};
say %source;
#+END_SRC 
***** If you prefer to create a new hash instead of mutating the original, you can use:
#+BEGIN_SRC raku
say %source.duckmap: -> %a where { 
    .<modified>:exists 
    and .values.none ~~ Associative 
} { 
   %( |%a, modified => %a<modified>.not ) 
};
#+END_SRC 
***** Q: why not use deepmap?

**** Maron (2colours)
***** 
#+BEGIN_SRC raku
%source{*;*;'modified'} .= map: &transform-modified;
#+END_SRC 

***** 
#+BEGIN_SRC raku
.=&transform-modified for %source{*;*;'modified'};
#+END_SRC 

***** Marton (2colours) comments "semilists" don't seem documented, but work
****** https://github.com/doomvox/raku-study/discussions/15



*** can you use gather/take with race?
**** A: no.
***** Lengthy discussions follow
****** https://stackoverflow.com/questions/79550260/use-gather-take-with-race
****** https://github.com/doomvox/raku-study/discussions/17


** older topics


**** william michels
***** https://arxiv.org/abs/1910.08129


*** william michels at play in stackoverflow land:
**** https://stackoverflow.com/questions/43370856/how-can-i-pass-a-perl-6-object-through-a-nativecall-callback

*** William Michels: Raku answers to shell questions
**** https://unix.stackexchange.com/a/797530/227738
**** https://unix.stackexchange.com/a/797471/227738
**** https://unix.stackexchange.com/a/797904/227738



** follow-up

*** TODO doc problems
**** https://docs.raku.org/routine/duckmap
**** Rat?  Not Numeric?
**** Why changed data with changed code?
**** Possibly, better examples?

*** TODO start a people file already 
**** farley
***** apogee == matt dowdy
***** librasteve == steve rowe
***** jubilatious1 == william michels
***** util == bruce gray
***** 2colours == Marton Polgar  (with accented 'a' s)
***** doom == doomvox == tailorpaul == joseph brenner == me
***** antonov == anton antonov


** announcements 
*** next meetings

**** Aug 24, 2025 
**** Sep  7, 2025 (ok: labor day weekend was the week before)
**** Sep 21, 2025 
**** Oct  5, 2025
**** Oct 19, 2025
**** Nov 2, 2025
**** Nov 16, 2025
**** Dec 7, 2025 (three week gap, to get past thanksgiving weekend)
**** Dec 21, 2025
**** Jan  4, 2025
**** Jan  18, 2025
