* meeting notes September 12, 2025
** the raku study group
**** usual links
***** these notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025sep21.org 

***** code examples
****** https://github.com/doomvox/raku-study/tree/main/bin/2025sep21
****** https://github.com/doomvox/raku-study/tree/main/bin/2025aug24
****** https://github.com/doomvox/raku-study/tree/main/bin/2025aug10

***** last meeting notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025sep07.org 

***** group discussions at github
****** https://github.com/doomvox/raku-study/discussions 

** topics
*** generative art
**** https://www.amazon.com/Generative-Art-Practical-Guide-Processing/dp/1935182625

*** perl: mocking things when doing functional programming
**** my take: find a way to not mock, if you can
**** Bruce Gray:
***** Canonicalize
***** Wrap and only use the wrapper.
***** Replacement values by first seen.

*** fun with The Literature
**** google scholar search (using terms like 'empirical') turned up:
***** https://ciajournal.com/index.php/jcia/article/view/26
***** https://ciajournal.com/index.php/jcia/article/view/26/27
***** "An Empirical Study on the Accuracy of Large Language Models in API Documentation Understanding: A Cross-Programming Language Analysis"

*** William Michels drags us out to the bikeshed for a marketing session
**** https://github.com/librasteve/raku-org-25-proto/issues/14#issuecomment-3300696528
**** The movie poster idea is pretty good

*** "Surfaces and Essences" by Douglas Hofstadter and Emmanuel Sander
**** Tim Schafer pick
**** using analogies to understand

*** from last meeting: spurt
**** bill had fears about a problem with the process-- e.g. does lizmat still toss off pull requests too easily?
**** https://github.com/rakudo/rakudo/pull/5949
***** lizmat: "Closing as there is no consensus that this is a good idea."

*** assignment for next time: Anton will show us how to do a search index 
**** The search process I have in mind is explained here: 
**** https://github.com/antononcube/EconomicsAI
**** htmx+Air+Red+Cro
***** Marton:
****** Red is the "big Raku ORM",
****** Cro is the "big Raku web Framework", 
****** Air is his own thing (not sure what it does) and 
****** htmx is some sort of common html templating system

** last meetings topics (trim)

*** revisiting: how to specify lists of integers via discontinuous ascending or descending ranges 
***** I use the english "range" here, which might or might not be a Raku "range".
**** "B1 style": mixed doubles and triples (for descent) with semi-cs and trailing .flat
#+BEGIN_SRC raku
say (4...0; 2..6; 0..2).flat;
# (4 3 2 1 0 2 3 4 5 6 0 1 2)
#+END_SRC 
***** but: this has a gotcha with for-loops
****** the semics can be a compiler error
****** but only with *two* semics, one or three is fine.
******* # https://github.com/doomvox/raku-study/tree/main/bin/2025aug10/bills_solution_to_flatness.raku
******* # /home/doom/End/Cave/RakuStudy/Wall/raku-study/bin/2025aug10/bills_solution_to_flatness.raku

**** bruce gray code, trying to imitate Rlang's c()
***** https://github.com/doomvox/raku-study/tree/main/bin/2025aug24/discontinuous_integer_ranges.raku
***** /home/doom/End/Cave/RakuStudy/Wall/raku-study/bin/2025aug24/discontinuous_integer_ranges.raku

*** grep URI line from file and trim trailing '#' comment
**** https://unix.stackexchange.com/questions/799195/remove-new-lines-and-everything-after-comment-symbol-with-awk-or-sed
**** raku answer from jubilatious1 
#+BEGIN_SRC sh
 raku -ne 'print S/ \h+ \# <-[#]>+ $$ //;  file
#+END_SRC 
#+BEGIN_SRC sh
 raku -ne '.subst(/ \h+ \# <-[#]>+ $$ /).print;'  file
#+END_SRC 
***** note: the \h+ requires leading whitespace in front of the comment character
***** made the cut for the rakudo weekly
****** https://rakudoweekly.blog/2025/09/01/2025-35-sensitive-data/

*** async in raku and python
**** https://www.reddit.com/r/rakulang/comments/1n8hjrr/async_in_raku_vs_python/

*** lizmat on complying with the european "cyber resilience act"
**** https://dev.to/lizmat/towards-more-accountability-of-raku-programs-3g2



** and topics from the forgotten folds of time
*** some of my many open projects:
**** links I expect to use again some day
****** duckmap examples are here:
******* https://github.com/doomvox/raku-study/tree/main/bin/2025jul13
****** Subtitle parsing (a subject I'll revive some day):
******* https://github.com/doomvox/raku-study/tree/main/bin/Subtitles


*** knuth 'concrete mathematics"
**** bruce gray's favorite math book
**** https://archive.org/details/concrete-mathematics

*** rob: weekly challenge spinoff tic-tac-toe board representation
**** 3x3: an issue with binding and shaped arrays
***** goal: shaped arrays that share containers for particular elements

**** https://docs.raku.org/syntax/Shaped%20arrays
**** https://github.com/doomvox/raku-study/blob/main/bin/2025aug24/shared_array_elements_via_binding.raku
**** https://docs.raku.org/language/containers#Binding_to_array_elements
**** https://docs.raku.org/type/IterationBuffer#method_BIND-POS
**** https://docs.raku.org/routine/BIND-POS
**** https://github.com/rakudo/rakudo/blob/main/src/core.c/Array/Shaped.rakumod
**** https://github.com/rakudo/rakudo/blob/57778e432003df466d8c797070345b81cb1ffdbf/src/core.c/Array/Shaped.rakumod#L191
**** https://github.com/rakudo/rakudo/blob/main/src/core.c/Array.rakumod
**** https://github.com/rakudo/rakudo/tree/main/src/core.c/Array

*** anton subject:
**** Raku introspection nice for LLM implementations
**** open AI, LLM providers, release packages in python
***** python has *some* introspection

*** our friend the monad (tim and anton)
**** Marton: "Promises in Javascript are 'impure' monads" 
**** Anton: "glorified decorator pattern"
**** Raku "feed" operators similar (not consistent)
**** "in raku you can make monads that define your grammars"
**** Everything about monads: 
***** https://www.youtube.com/watch?v=Xz5B4B0kVco


*** back to problem-solving issue 407: comma seperated triple dot sequences
**** https://github.com/Raku/problem-solving/issues/407
***** I added a few small comments just now
**** there are multiple things going on 
***** sequences aren't the solution here, but they *do* have some weirdzo aspects
***** William Michels original goal:
****** extraction of columns from a tabular structure
******* really: wants raku to flatten just right when needed
******** TODO need for a "raku dp cookbook"?

****** generating discontinuous integer ranges
******* TODO forget not bg's contribution (faking descending ranges):
******** https://github.com/doomvox/raku-study/tree/main/bin/2025aug24/bg.raku


*** "is item" trait
**** https://raku-advent.blog/2024/12/25/day-25-raku-2024-review/
***** The is item trait can be used on @ and % sigilled parameters 
****** positional or associative is acceptable in dispatch if it is presented as an item
****** just a "tie-breaker": should always also a dispatch candidate that accepts when not itemized
#+BEGIN_SRC raku
multi sub foo(@a)         { say "array" }
multi sub foo(@a is item) { say "item"  }
foo  [1,2,3];  # array
foo $[1,2,3];  # item
#+END_SRC 
****** Q: what is this for, really?
******* things that are "itemized" don't iterate, e.g. $(1,2,3) vs (1,2,3)

*** flatnessizers
**** flat hammer
***** code example
****** https://github.com/Raku/roast/blob/master/S32-list/flat.t
#+BEGIN_SRC raku
is-deeply @a.flat(:hammer), $hammered, 'array.flat(:hammer)';
#+END_SRC 
****** https://raku-advent.blog/2024/12/25/day-25-raku-2024-review/
#+BEGIN_SRC raku
my @a = 1, [2, [3,4]];
say @a.flat;           # (1 [2 [3 4]])
say @a.flat(:hammer);  # (1 2 3 4)
#+END_SRC 
******* One can now also use HyperWhatever (aka **) in a postcircumfix [ ] for the same semantics:
#+BEGIN_SRC raku
my @a = 1, [2, [3,4]];
say @a[*];   # (1 [2 [3 4]])
say @a[**];  # (1 2 3 4)
#+END_SRC 
**** how about: hyper slip

*** richard hainsworth: altering a deep field
**** https://stackoverflow.com/questions/79528856/how-to-make-altering-a-deep-field-more-idiomatic/79540270#79540270
***** the goal is to de-uglify this code:
#+BEGIN_SRC raku
# Given data:
#   %sources{$lang}{$filename}{$attribute}
for %sources.values {
    for .pairs {
       for .value.pairs.grep({ .key eq 'modified'}) {
          .value = transform-modified( .value )
       }
    }
}
#+END_SRC 

**** wamba: duckmap
***** iterates through hash, toggles the modified fields only in the deepest layers
****** checks for the existence of modified and ensures no further associative values exist.
#+BEGIN_SRC raku
my %source := %(b => %(a => %(modified => True, c => 2), modified => True));
%source.duckmap: -> %a where { 
    .<modified>:exists 
    and .values.none ~~ Associative 
} { 
    %a<modified> .=not 
};
say %source;
#+END_SRC 
***** If you prefer to create a new hash instead of mutating the original, you can use:
#+BEGIN_SRC raku
say %source.duckmap: -> %a where { 
    .<modified>:exists 
    and .values.none ~~ Associative 
} { 
   %( |%a, modified => %a<modified>.not ) 
};
#+END_SRC 
***** Q: why not use deepmap?

**** Maron (2colours)
***** 
#+BEGIN_SRC raku
%source{*;*;'modified'} .= map: &transform-modified;
#+END_SRC 

***** 
#+BEGIN_SRC raku
.=&transform-modified for %source{*;*;'modified'};
#+END_SRC 

***** Marton (2colours) comments "semilists" don't seem documented, but work
****** https://github.com/doomvox/raku-study/discussions/15



*** can you use gather/take with race?
**** A: no.
***** Lengthy discussions follow
****** https://stackoverflow.com/questions/79550260/use-gather-take-with-race
****** https://github.com/doomvox/raku-study/discussions/17





** even older topics
*** william michels
**** https://arxiv.org/abs/1910.08129

*** william michels at play in stackoverflow land:
**** https://stackoverflow.com/questions/43370856/how-can-i-pass-a-perl-6-object-through-a-nativecall-callback

*** William Michels: Raku answers to shell questions
**** https://unix.stackexchange.com/a/797530/227738
**** https://unix.stackexchange.com/a/797471/227738
**** https://unix.stackexchange.com/a/797904/227738

** follow-up
*** next time
**** warm-up on how to screen share right
**** jack the font size in emacvs

*** TODO doc problems
**** https://docs.raku.org/routine/duckmap
**** Rat?  Not Numeric?
**** Why changed data with changed code?
**** Possibly, better examples?

*** TODO start a people file already 
**** farley
***** apogee == matt dowdy
***** librasteve == steve rowe
***** jubilatious1 == william michels
***** util == bruce gray
***** 2colours == Marton Polgar  (with accented 'a' s)
***** doom == doomvox == tailorpaul == joseph brenner == me
***** antonov == anton antonov


** announcements 
*** next meetings
**** Sep 21, 2025 
**** Oct  5, 2025
**** Oct 19, 2025
**** Nov 2, 2025
**** Nov 16, 2025
**** Dec 7, 2025 (three week gap, to get past thanksgiving weekend)
**** Dec 21, 2025
**** Jan  4, 2025
**** Jan  18, 2025
