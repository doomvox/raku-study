* meeting notes April 6, 2025 
** the raku study group
**** usual links
***** these notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025apr06.org 

***** code examples
****** https://github.com/doomvox/raku-study/tree/main/bin/2025apr06
****** https://github.com/doomvox/raku-study/tree/main/bin/DeepMap

***** last meeting notes
****** https://github.com/doomvox/raku-study/blob/main/notes/meeting_2025mar09.org 

**** discussion group
***** https://github.com/doomvox/raku-study/discussions 

** topics
*** buffered io in perl and raku
**** example of processing subtitles files, *.srt
**** $OUTPUT_AUTOFLUSH, $|§
***** No global alternative available. TTY handles are unbuffered by default, for others, set out-buffer to zero or use :!out-buffer with open on a specific IO::Handle.

*** neovim => lua; vim => perl
**** lua prototypal like JS
**** lua "table" is a hash/map/dictionary, not a "data frame"
*** zig community re-thought project design
**** no more make/autoconf etc.
*** makefile cultures 
*** jeff has a grammars question
**** parsing tokens run together, not separated by whitespace
***** jeff:
#+BEGIN_SRC txt
Tokens run together: 

FOOBAR#BAR"STRINGFOO"

The following are tokens:

- FOO
- BAR#
- BAR
- "STRINGFOO"

#+END_SRC 
***** TODO bruce gray has a solution (see saved chat)
#+BEGIN_SRC raku
    grammar G {
        regex TOP  { [ <foo> | <bar_hash> | <bar_plain> | <a_string> ]+ } # using `regex` where we would usually use `rule`
        token foo       { 'FOO'           }
        token bar_hash  { 'BAR#'          }
        token bar_plain { 'BAR'           }
        token a_string  { '"' <-["]>* '"' }
    }
    my $s = 'FOOBAR#BAR"STRINGFOO"';
    my $p = G.parse($s)
        orelse die;
    say $p;
  # Output:
  #     ｢FOOBAR#BAR"STRINGFOO"｣
  #      foo => ｢FOO｣
  #      bar_hash => ｢BAR#｣
  #      bar_plain => ｢BAR｣
  #      a_string => ｢"STRINGFOO"｣
#+END_SRC 

*** jeff has yet another question he's been too shy to tell us

*** marton raised a number of points in the group discussion
**** https://github.com/doomvox/raku-study/discussions
**** https://github.com/doomvox/raku-study/discussions/17


*** raku jvm backend discussion
**** it's an interpreter on top of an interpreter 
**** is it possible to write a compiler, to run raku on the jvm?
***** transpiler
***** marton: metamodel issues
****** "the six model"

*** rob: weirdness with whatever

*** rust
**** tim: readability issues
**** jeff: prefers finer control
**** marton: rust is C++ with half of it removed


*** time refers to odd string reversal challenge
https://theweeklychallenge.org/blog/perl-weekly-challenge-313/

#+BEGIN_SRC raku

#+END_SRC 


** topics from Mar 9
*** jeff interested in how to create a new character encoding
**** roles?
**** utf8-c8
***** /home/doom/End/Cave/Raku/Wall/roast/S32-encoding/registry.t
***** https://github.com/rakudo/rakudo/issues/5807
***** TODO Add a problem-solving bug? Not clear how to do it.

*** rob: rakudo bug turned up in weekly challenge
**** .= operator not working as "explicit assignment"
**** https://github.com/rakudo/rakudo/issues/5803
#+BEGIN_SRC raku
## Example from the docs:
say ++$a.=abs;
say ++$a .= abs;  ## doesn't work
# Cannot modify an immutable Int (7)
#  in block <unit> at <unknown file> line 1

say ++$a.=abs;    ## this *does* work
# 8

## Marton's example
# -1.succ
# -2      ## the - is applied *after* the .succ increases value by 1

1.succ
# 2

-1 .succ  ## with the space, we start at -1 and step up 1 to 0
# 0
#+END_SRC raku

***** Marton looks up older reports:
****** https://github.com/rakudo/rakudo/issues/4996
****** https://github.com/rakudo/rakudo/issues/4863
****** https://github.com/Raku/doc/issues/3333

***** TODO Traps of .= weirdness not adequate
****** https://docs.raku.org/language/traps
******* https://docs.raku.org/language/traps#Method_calls_do_not_chain
******* https://docs.raku.org/language/traps#Method_operator_calls_and_prefix_minus

*** rob: raku base 36, bank echecks 
*** weekly challenge

*** jeff: cro experience

*** bike accident 

** follow-up 
*** announce next meeting immediately
*** check jeff's bug status
**** added pointer to roast test 
*** doc bug traps .= weirdness not well covered.

** announcements 
*** next meetings
**** Apr  6, 2025
***** after this, any two-week pattern crashes into Easter or Mother's Day
**** Apr 13, 2025
**** Apr 27, 2025
**** May 18, 2025

**** Perl & Raku Conference (Greenville, SC) 2025-06-27 through 29 Fri-Sun
***** https://tprc.us/

