* Multidispatch, raku-style
*** The Once and Future Perl - Damian Conway - TPRC 2024 
**** https://www.youtube.com/watch?v=0x9LD8oOmv0&list=PLA9_Hq3zhoFw6patag2gZcDjpugDLBStL&index=8

***** Has one of the clearer descriptions of Raku-style multi-dispatch
****** though the subject here is the Damian perl module Multi::Dispatch
***** @30min: multidispatch discussion begins 
***** @48:50: multidispatch call resolution
***** @52:00: ABCDEFGHI
****** central idea: call the 'most specific' option
|---+------------------+------------------------------------------------------+----------------------------------|
| A | Arity            |                                                      |                                  |
| B | Beforehandedness | :before                                              |                                  |
| C | Constraint       | Types/Classes of args: try most derived first        |                                  |
| D | Destructuring    | multi xxx ( Int [$i, $j] ) {...}                     | Doesn't translate to Raku (?)    |
| E | Essentials       | How many args are required                           |                                  |
| F | Facultativity    | More arguments that are optional                     |                                  |
| G | Greed            | Slurpies are less specific, demote 'greedy' versions |                                  |
| H | Heredity         | For methods, most derived method wins                |                                  |
| I | Inception        | Order of definition                                  | problematic: even as tie-breaker |

****** my comments:
******* a tight explanation with clear examples, but it takes a half hour (of a 1.5 hr talk)
******** examples are in perl: steal them and rakuize them?
******* some principles are positive (reasons to promote), some read better as negative
******* why are E and F separate?  (Hard to write a clear summary: not a good sign?)
******* Down at at 'H' we're suddently looking at the methods not the arguments
******** no objection, but might that confuse?  What if you expected H up around C?
******** verify it works like this in Raku
******* technical issue with "I":
******** when multis are defined in different modules, the order of use statments matters
********* example idea: handling negatives and positives where both sides want 0
******* my personal odyssey with "I"
******** it wasn't mentioned in the Raku docs until I added it
******** it's not in the original design documents
********* more like oral tradition: something Larry Wall said to Jonathan Worthington
******** it's not covered by the test suite (aka 'the spec')
********* I tried to add a test: the pull request has been ignored
******* not as simple as a cascade where the last is always invoked when all else fails
******** "Cannot resolve ... none of these signatures matches"
******** In some cases order-of-definition does not resolve ambiguities, in others it does
******* "Destructuring" 
******** specific to perl5, isn't it?
******** breaking down a conglomerate into named components automatically 

*** DCONWAY's Multi::Dispatch
**** dependencies: PPR, Keyword::Simple, Algorithm::FastPermute
**** my current perl version: 5.32.1 
***** latest: 5.40
*** Raku docs (note searches can get you trapped in glossary)
**** https://docs.raku.org/syntax/multi
**** https://docs.raku.org/language/functions#Multi-dispatch

